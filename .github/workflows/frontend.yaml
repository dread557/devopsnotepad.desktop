name: CI-CD-Pipeline

on:
  workflow_dispatch:
  push:
  pull_request:
    branches: ["dev"]

jobs:
  build_and_test_frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - uses: ./frontend_website
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: frontend_website/package-lock.json
      - name: install dependencies
        run: |
          npm install
          npm ci

      - name: build and test
        run: |
          npm run build --if-present
          npm test

  dockerize_frontend:
    runs-on: ubuntu-latest
    needs: [build_and_test_frontend]
    steps:
      - name: Docker Login
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Code Checkout
        uses: actions/checkout@v2.5.0
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2.1.0
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
      - name: Build and Push
        uses: docker/build-push-action@v3.2.0
        with:
          context: "frontend_website/"
          file: "frontend_website/Dockerfile"
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devopsnotepadpad-frontend-website:latest
          
  build_and_test_backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - uses: ./backend
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: install dependencies
        run: |
          npm install
          npm ci
      - name: build and test
        run: |
          npm run build --if-present
          npm test

  dockerize_backend:
    runs-on: ubuntu-latest
    needs: [build_and_test_backend]
    steps:
      - name: Docker Login
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Code Checkout
        uses: actions/checkout@v2.5.0
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2.1.0
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
      - name: Build and Push
        uses: docker/build-push-action@v3.2.0
        with:
          context: "backend/"
          file: "backend/Dockerfile"
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devopsnotepad-backend:latest
          
  deploy_frontend_backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Push to server and deploy
        uses: fifsky/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          USERNAME: ${{ secrets.DEV_USERNAME }}
          PORT: ${{ secrets.ACCESS_PORT }}
          KEY: ${{ secrets.DEV_SSHKEY }}
          script: cd ${{ secrets.DEV_PATH }} && sudo docker-compose pull && sudo docker-compose up --remove-orphans
